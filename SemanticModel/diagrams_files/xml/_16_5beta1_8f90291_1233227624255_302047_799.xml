<?xml version="1.0" encoding="UTF-8"?><magicdraw><opaqueexpression classType="OpaqueExpression" humanType="Opaque Expression" icon="diagrams_files/icon_opaqueexpression_1255445356.png" id="_16_5beta1_8f90291_1233227624255_302047_799"><body humanName="Body" mode="e"><String>encoded5FgeneralizationOfGeneral-&gt;isEmpty()
implies
(self.oclAsType(Type).encoded5FtypedElementOfType-&gt;exists(a|a.oclIsKindOf(Property) implies a.oclAsType(Property).opposite.type.oclIsKindOf(UseCase)))</String></body><documentation humanName="Documentation"/><language humanName="Language" mode="e"><String>OCL2.0</String></language><name humanName="Name"/><owner classType="Constraint" humanName="Owner" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" mode="s,e" name="Actor and Usecase" refid="_16_5beta1_8f90291_1233227624255_242767_796"/><owningConstraint classType="Constraint" humanName="Owning Constraint" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" name="Actor and Usecase" refid="_16_5beta1_8f90291_1233227624255_242767_796"/><qualifiedName humanName="Qualified Name">UML Standard Profile::Validation Profile::UML completeness constraints::Actor and Usecase::</qualifiedName><text humanName="Text" mode="standard">encoded5FgeneralizationOfGeneral-&gt;isEmpty()
implies
(self.oclAsType(Type).encoded5FtypedElementOfType-&gt;exists(a|a.oclIsKindOf(Property) implies a.oclAsType(Property).opposite.type.oclIsKindOf(UseCase)))</text><TO_DO humanName="To Do" mode="s,e"/><TYPE_MODIFIER humanName="Type Modifier"/><visibility humanName="Visibility">public</visibility></opaqueexpression></magicdraw>