<?xml version="1.0" encoding="UTF-8"?><magicdraw><opaqueexpression classType="OpaqueExpression" humanType="Opaque Expression" icon="diagrams_files/icon_opaqueexpression_1255445356.png" id="_12_5_1_f720368_1185278226944_265984_179"><body humanName="Body" mode="e"><String>let sourceLifeline:Lifeline = self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered-&gt;any(true) in
let targetLifeline:Lifeline = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered-&gt;any(true) in
(sourceLifeline &lt;&gt; targetLifeline) implies
(let sourceType:Type = sourceLifeline.represents.type in
let targetOperation:Operation = self.signature.oclAsType(Operation) in
(not sourceType.oclIsUndefined() and not targetOperation.oclIsUndefined()) implies 
((targetOperation.visibility &lt;&gt; VisibilityKind::private) or (targetOperation.UMLClass = sourceType)))</String></body><documentation humanName="Documentation"/><language humanName="Language" mode="e"><String>OCL2.0</String></language><name humanName="Name"/><owner classType="Constraint" humanName="Owner" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" mode="s,e" name="Call from Foreign Classifier" refid="_12_5_1_f720368_1185278031365_956467_170"/><owningConstraint classType="Constraint" humanName="Owning Constraint" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" name="Call from Foreign Classifier" refid="_12_5_1_f720368_1185278031365_956467_170"/><qualifiedName humanName="Qualified Name">UML Standard Profile::Validation Profile::UML correctness constraints::Call from Foreign Classifier::</qualifiedName><text humanName="Text" mode="standard">let sourceLifeline:Lifeline = self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered-&gt;any(true) in
let targetLifeline:Lifeline = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered-&gt;any(true) in
(sourceLifeline &lt;&gt; targetLifeline) implies
(let sourceType:Type = sourceLifeline.represents.type in
let targetOperation:Operation = self.signature.oclAsType(Operation) in
(not sourceType.oclIsUndefined() and not targetOperation.oclIsUndefined()) implies 
((targetOperation.visibility &lt;&gt; VisibilityKind::private) or (targetOperation.UMLClass = sourceType)))</text><TO_DO humanName="To Do" mode="s,e"/><TYPE_MODIFIER humanName="Type Modifier"/><visibility humanName="Visibility">public</visibility></opaqueexpression></magicdraw>