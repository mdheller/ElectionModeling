<?xml version="1.0" encoding="UTF-8"?><magicdraw><constraint classType="Constraint" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" id="_16_5beta1_8c6027f_1228471175015_758320_324"><APPLIED_STEREOTYPES humanName="Applied Stereotype" mode="e"><stereotype classType="Stereotype" humanType="Stereotype" icon="diagrams_files/icon_stereotype_2041996211.png" name="InvisibleStereotype" refid="_9_0_be00301_1108044721245_236588_411"/><stereotype classType="Stereotype" humanType="Stereotype" icon="diagrams_files/icon_stereotype_2041996211.png" name="validationRule" refid="_11_5_f720368_1159529736746_90611_65"/></APPLIED_STEREOTYPES><appliedStereotype humanName="Applied Stereotype" mode="e"><stereotype classType="Stereotype" humanType="Stereotype" icon="diagrams_files/icon_stereotype_2041996211.png" name="InvisibleStereotype" refid="_9_0_be00301_1108044721245_236588_411"><property classType="Property" humanName="Base_ Element" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="base_Element" refid="_10_0EAPbeta_be00301_1123081772098_411862_275"/></stereotype><stereotype classType="Stereotype" humanType="Stereotype" icon="diagrams_files/icon_stereotype_2041996211.png" name="validationRule" refid="_11_5_f720368_1159529736746_90611_65"><property classType="Property" humanName="Abbreviation" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="abbreviation" refid="_11_5_f720368_1159529748558_465050_89"><String>StateOfStInvaraint</String></property><property classType="Property" humanName="Base_ Constraint" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="base_Constraint" refid="_11_5_f720368_1159529741277_876793_68"/><property classType="Property" humanName="Base_ Constraint" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="base_Constraint" refid="_18_5beta_8760276_1474975117783_731347_4225"/><property classType="Property" humanName="Base_ Constraint" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="base_Constraint" refid="_12_0EAPbeta_f720368_1161678361011_508335_106"/><property classType="Property" humanName="Error Message" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="errorMessage" refid="_11_5_f720368_1159529753480_546197_91"><String>Incorrect state of state invariant.</String></property><property classType="Property" humanName="Implementation" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="implementation" refid="_15_1EAPbeta_8f90291_1206013298921_87587_98"/><property classType="Property" humanName="Parent Object" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="parentObject" refid="_17_0_4beta_f980370_1357884272472_635619_2868"/><property classType="Property" humanName="Parent Rule" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="parentRule" refid="_17_0_4beta_f980370_1357883565452_177331_2867"/><property classType="Property" humanName="Severity" humanType="Property" icon="diagrams_files/icon_property_468125573.png" name="severity" refid="_11_5_f720368_1159529761793_335077_93"><enumerationliteral classType="EnumerationLiteral" humanType="Enumeration Literal" icon="diagrams_files/icon_enumerationliteral_1424373520.png" name="error" refid="_11_5_f720368_1159529793090_656876_122"/></property></stereotype></appliedStereotype><appliedStereotypeInstance classType="InstanceSpecification" humanName="Applied Stereotype Instance" humanType="Instance Specification" icon="diagrams_files/icon_instancespecification_910504711.png" name=" : UML Standard Profile::MagicDraw Profile::InvisibleStereotype, UML Standard Profile::Validation Profile::validationRule" refid="_16_5beta1_8c6027f_1228471175015_136500_325"/><constrainedElement humanName="Constrained Element" mode="s,e"><class classType="Class" humanType="Class" icon="diagrams_files/icon_class_966745694.png" name="StateInvariant" refid="_9_0_62a020a_1105704888416_506222_8337"/></constrainedElement><context classType="Package" humanName="Context" humanType="Package" icon="diagrams_files/icon_package_2110558717.png" name="UML correctness constraints" refid="_12_0_8f90291_1163446670265_941740_378"/><documentation humanName="Documentation"/><name humanName="Name" mode="s,e">State of State Invariant</name><namespace classType="Package" humanName="Namespace" humanType="Package" icon="diagrams_files/icon_package_2110558717.png" name="UML correctness constraints" refid="_12_0_8f90291_1163446670265_941740_378"/><ownedElement humanName="Owned Element"><instancespecification classType="InstanceSpecification" humanType="Instance Specification" icon="diagrams_files/icon_instancespecification_910504711.png" name=" : UML Standard Profile::MagicDraw Profile::InvisibleStereotype, UML Standard Profile::Validation Profile::validationRule" refid="_16_5beta1_8c6027f_1228471175015_136500_325"/><opaqueexpression classType="OpaqueExpression" humanType="Opaque Expression" icon="diagrams_files/icon_opaqueexpression_1255445356.png" name="let lifelineType:Type = self.covered-&gt;any(true).represents.type in let constraintBody:ValueSpecification = self.invariant.specification in constraintBody.oclIsKindOf(ElementValue) implies (let stateType:Classifier = constraintBody.oclAsType(ElementValue).element.oclAsType(State).redefinitionContext-&gt;any(true) in stateType = lifelineType)" refid="_16_5beta1_8c6027f_1228471175015_848499_326" text="let lifelineType:Type = self.covered-&gt;any(true).represents.type in&#10;let constraintBody:ValueSpecification = self.invariant.specification in&#10;constraintBody.oclIsKindOf(ElementValue) implies&#10;(let stateType:Classifier = constraintBody.oclAsType(ElementValue).element.oclAsType(State).redefinitionContext-&gt;any(true) in&#10;stateType = lifelineType)"/></ownedElement><owner classType="Package" humanName="Owner" humanType="Package" icon="diagrams_files/icon_package_2110558717.png" mode="s,e" name="UML correctness constraints" refid="_12_0_8f90291_1163446670265_941740_378"/><qualifiedName humanName="Qualified Name" mode="e">UML Standard Profile::Validation Profile::UML correctness constraints::State of State Invariant</qualifiedName><specification classType="OpaqueExpression" humanName="Specification" humanType="Opaque Expression" icon="diagrams_files/icon_opaqueexpression_1255445356.png" mode="s,e" name="let lifelineType:Type = self.covered-&gt;any(true).represents.type in let constraintBody:ValueSpecification = self.invariant.specification in constraintBody.oclIsKindOf(ElementValue) implies (let stateType:Classifier = constraintBody.oclAsType(ElementValue).element.oclAsType(State).redefinitionContext-&gt;any(true) in stateType = lifelineType)" refid="_16_5beta1_8c6027f_1228471175015_848499_326" text="let lifelineType:Type = self.covered-&gt;any(true).represents.type in&#10;let constraintBody:ValueSpecification = self.invariant.specification in&#10;constraintBody.oclIsKindOf(ElementValue) implies&#10;(let stateType:Classifier = constraintBody.oclAsType(ElementValue).element.oclAsType(State).redefinitionContext-&gt;any(true) in&#10;stateType = lifelineType)"/><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility></constraint></magicdraw>