<?xml version="1.0" encoding="UTF-8"?><magicdraw><opaqueexpression classType="OpaqueExpression" humanType="Opaque Expression" icon="diagrams_files/icon_opaqueexpression_1255445356.png" id="_12_0_8f90291_1163300385359_935032_323"><body humanName="Body" mode="e"><String>let atr: Set(Property) = attribute-&gt;select (a | not a.opposite.oclIsUndefined() and a.opposite.isComposite)-&gt;asSet() in
atr -&gt; exists( n | not n.lowerValue.oclIsUndefined() and n.lower = 1) implies 
atr -&gt; size() = 1</String></body><documentation humanName="Documentation"/><language humanName="Language" mode="e"><String>OCL2.0</String></language><name humanName="Name"/><owner classType="Constraint" humanName="Owner" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" mode="s,e" name="Multiple Compositions" refid="_12_0_8f90291_1163300385359_177119_322"/><owningConstraint classType="Constraint" humanName="Owning Constraint" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" name="Multiple Compositions" refid="_12_0_8f90291_1163300385359_177119_322"/><qualifiedName humanName="Qualified Name">UML Standard Profile::Validation Profile::UML correctness constraints::Multiple Compositions::</qualifiedName><text humanName="Text" mode="standard">let atr: Set(Property) = attribute-&gt;select (a | not a.opposite.oclIsUndefined() and a.opposite.isComposite)-&gt;asSet() in
atr -&gt; exists( n | not n.lowerValue.oclIsUndefined() and n.lower = 1) implies 
atr -&gt; size() = 1</text><TO_DO humanName="To Do" mode="s,e"/><TYPE_MODIFIER humanName="Type Modifier"/><visibility humanName="Visibility">public</visibility></opaqueexpression></magicdraw>