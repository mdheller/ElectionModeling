<?xml version="1.0" encoding="UTF-8"?><magicdraw><opaqueexpression classType="OpaqueExpression" humanType="Opaque Expression" icon="diagrams_files/icon_opaqueexpression_1255445356.png" id="_12_0_8f90291_1163192216203_955962_325"><body humanName="Body" mode="e"><String>let oppose:Property =  association.memberEnd-&gt;any(p|p &lt;&gt; self) in
(not oppose.oclIsUndefined()
and oppose.isComposite
and not upperValue.oclIsUndefined())

implies (upper = 1)</String></body><documentation humanName="Documentation"/><language humanName="Language" mode="e"><String>OCL2.0</String></language><name humanName="Name"/><owner classType="Constraint" humanName="Owner" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" mode="s,e" name="Wrong Maximum Composite Multiplicity " refid="_12_0_8f90291_1163192150781_597893_324"/><owningConstraint classType="Constraint" humanName="Owning Constraint" humanType="Constraint" icon="diagrams_files/icon_constraint_1273879638.png" name="Wrong Maximum Composite Multiplicity " refid="_12_0_8f90291_1163192150781_597893_324"/><qualifiedName humanName="Qualified Name">UML Standard Profile::Validation Profile::UML correctness constraints::Wrong Maximum Composite Multiplicity ::</qualifiedName><text humanName="Text" mode="standard">let oppose:Property =  association.memberEnd-&gt;any(p|p &lt;&gt; self) in
(not oppose.oclIsUndefined()
and oppose.isComposite
and not upperValue.oclIsUndefined())

implies (upper = 1)</text><TO_DO humanName="To Do" mode="s,e"/><TYPE_MODIFIER humanName="Type Modifier"/><visibility humanName="Visibility">public</visibility></opaqueexpression></magicdraw>